import json
import paho.mqtt.client as mqtt
import threading
from time import sleep
import geopy.distance
import math

simple_positions = [[(40.64196130815548, -8.651599817893402),(40.64260232822538, -8.648281407423386)],
[(40.6425896880125, -8.648120496512975),(40.64158087763361, -8.647778626816859)],
[(40.64158087763361, -8.647778626816859),(40.64397779517385, -8.64862076000463),],]


number_datasets = 4

list_0 = [(40.64196130815548, -8.651599817893402), (40.64197417621718, -8.651533465893005), (40.64198704328395, -8.651467113547346), (40.641999909335894, -8.651400760849818), (40.64201277435233, -8.65133440779353), (40.64202563831162, -8.651268054371293), (40.64203850119122, -8.651201700575596), (40.64205136296753, -8.651135346398588), (40.64206422361586, -8.651068991832062), (40.642077083110344, -8.651002636867418), (40.64208994142384, -8.650936281495623), (40.6421027985279, -8.65086992570722), (40.64211565439259, -8.650803569492249), (40.642128508986374, -8.65073721284024), (40.64214136227607, -8.65067085574015), (40.64215421422662, -8.650604498180332), (40.642167064800965, -8.650538140148463), (40.6421799139599, -8.650471781631513), (40.6421927616618, -8.650405422615647), (40.6422056078625, -8.650339063086193), (40.64221845251493, -8.65027270302752), (40.642231295568926, -8.65020634242296), (40.64224413697087, -8.650139981254696), (40.64225697666329, -8.650073619503653), (40.642269814584495, -8.650007257149333), (40.642282650668044, -8.64994089416969), (40.642295484842194, -8.649874530540895), (40.642308317029226, -8.649808166237163), (40.642321147144685, -8.64974180123046), (40.642333975096435, -8.649675435490206), (40.64234680078358, -8.649609068982931), (40.642359624095185, -8.649542701671841), (40.64237244490859, -8.649476333516262), (40.642385263087576, -8.64940996447102), (40.64239807847992, -8.649343594485657), (40.6424108909144, -8.649277223503415), (40.64242370019699, -8.64921085146002), (40.64243650610599, -8.649144478282016), (40.64244930838565, -8.649078103884712), (40.642462106737675, -8.649011728169341), (40.6424749008096, -8.648945351019263), (40.642487690178605, -8.64887897229457), (40.64250047432802, -8.648812591824383), (40.642513252612254, -8.648746209395277), (40.64252602420152, -8.648679824733073), (40.6425387879899, -8.648613437472543), (40.642551542429764, -8.648547047102937), (40.64256428520093, -8.648480652859146), (40.64257701243881, -8.648414253468093), (40.64258971642022, -8.64834784638929), (40.642602373998905, -8.648281424028552), (40.64260232822538, -8.648281407423386)]
list_1 = [(40.6425896880125, -8.648120496512975), (40.6425896880125, -8.648120496512975), (40.64256991056032, -8.648113820055084), (40.6425501332025, -8.648107143117095), (40.64253035594099, -8.648100465689101), (40.64251057877782, -8.648093787760788), (40.64249080171509, -8.648087109321395), (40.64247102475504, -8.648080430359697), (40.642451247899956, -8.648073750863967), (40.64243147115225, -8.648067070821943), (40.64241169451444, -8.6480603902208), (40.64239191798919, -8.648053709047096), (40.64237214157926, -8.64804702728673), (40.642352365287564, -8.648040344924901), (40.642332589117174, -8.648033661946046), (40.64231281307131, -8.648026978333782), (40.642293037153365, -8.648020294070832), (40.64227326136693, -8.648013609138971), (40.64225348571581, -8.648006923518926), (40.64223371020401, -8.648000237190287), (40.6422139348358, -8.647993550131408), (40.64219415961572, -8.647986862319291), (40.642174384548575, -8.647980173729447), (40.64215460963952, -8.647973484335758), (40.64213483489406, -8.647966794110301), (40.64211506031809, -8.64796010302316), (40.64209528591794, -8.647953411042192), (40.64207551170044, -8.647946718132792), (40.64205573767295, -8.647940024257577), (40.64203596384345, -8.647933329376048), (40.64201619022064, -8.647926633444186), (40.64199641681398, -8.64791993641396), (40.64197664363386, -8.647913238232762), (40.6419568706917, -8.64790653884273), (40.6419370980001, -8.6478998381799), (40.641917325573104, -8.647893136173199), (40.641897553426396, -8.647886432743192), (40.64187778157763, -8.647879727800511), (40.641858010046796, -8.647873021243868), (40.641838238856785, -8.647866312957502), (40.64181846803398, -8.647859602807848), (40.641798697609204, -8.647852890639081), (40.64177892761885, -8.647846176267054), (40.64175915810664, -8.6478394594708), (40.64173938912603, -8.647832739980297), (40.64171962074383, -8.64782601745807), (40.64169985304595, -8.647819291470364), (40.641680086146984, -8.647812561439105), (40.64166032020732, -8.647805826555567), (40.641640555467454, -8.647799085608096), (40.64162079232781, -8.647792336581508), (40.641601012057706, -8.647785673242867)]
list_2 = [(40.6425896880125, -8.648120496512975), (40.642569506951965, -8.648113683805315), (40.64254932598973, -8.648106870597555), (40.642529145127845, -8.648100056879159), (40.64250896436849, -8.64809324263914), (40.642488783713915, -8.648086427866033), (40.64246860316648, -8.648079612547868), (40.64244842272863, -8.648072796672114), (40.64242824240295, -8.648065980225681), (40.64240806219216, -8.648059163194834), (40.64238788209908, -8.648052345565171), (40.64236770212669, -8.648045527321576), (40.64234752227811, -8.648038708448153), (40.642327342556634, -8.648031888928166), (40.642307162965736, -8.648025068743975), (40.6422869835091, -8.648018247876958), (40.64226680419058, -8.648011426307427), (40.64224662501428, -8.648004604014535), (40.642226445984555, -8.647997780976166), (40.64220626710604, -8.647990957168822), (40.64218608838366, -8.647984132567489), (40.64216590982268, -8.647977307145482), (40.64214573142872, -8.647970480874267), (40.6421255532078, -8.647963653723275), (40.64210537516638, -8.647956825659666), (40.642085197311445, -8.647949996648068), (40.64206501965052, -8.647943166650286), (40.64204484219179, -8.647936335624925), (40.642024664944095, -8.647929503526989), (40.64200448791714, -8.64792267030738), (40.64198431112152, -8.647915835912327), (40.64196413456892, -8.647909000282665), (40.64194395827223, -8.647902163352994), (40.641923782245804, -8.647895325050637), (40.64190360650567, -8.647888485294354), (40.64188343106991, -8.647881643992731), (40.64186325595896, -8.647874801042146), (40.641843081196235, -8.647867956324156), (40.64182290680874, -8.647861109702061), (40.64180273282801, -8.647854261016349), (40.64178255929135, -8.647847410078453), (40.641762386243514, -8.647840556662038), (40.64174221373926, -8.647833700490397), (40.641722041847096, -8.647826841217533), (40.64170187065516, -8.647819978398443), (40.641681700281104, -8.64781311143956), (40.641661530889785, -8.647806239509526), (40.64164136272885, -8.647799361360663), (40.6416211962117, -8.647792474912256), (40.64160103216697, -8.64778557599975), (40.641580873089296, -8.647778652117687), (40.64158087763361, -8.647778626816859)]
list_3 = [(40.64158087763361, -8.647778626816859), (40.64158087763361, -8.647778626816859), (40.641628828419584, -8.647795408116881), (40.64167677895165, -8.647812190677213), (40.64172472922455, -8.647828974523696), (40.64177267923279, -8.647845759683268), (40.641820628970635, -8.647862546184037), (40.64186857843209, -8.64787933405537), (40.64191652761092, -8.647896123327966), (40.64196447650053, -8.647912914033954), (40.6420124250941, -8.647929706206996), (40.642060373384396, -8.647946499882401), (40.64210832136387, -8.647963295097238), (40.642156269024554, -8.647980091890487), (40.642204216358095, -8.647996890303185), (40.64225216335565, -8.648013690378583), (40.6423001100079, -8.648030492162345), (40.642348056305, -8.648047295702744), (40.64239600223651, -8.648064101050895), (40.64244394779136, -8.648080908261022), (40.64249189295778, -8.648097717390739), (40.64253983772325, -8.648114528501386), (40.642587782074415, -8.648131341658397), (40.642635725996975, -8.648148156931722), (40.642683669475616, -8.648164974396318), (40.6427316124939, -8.648181794132704), (40.64277955503409, -8.6481986162276), (40.64282749707704, -8.648215440774672), (40.64287543860202, -8.648232267875413), (40.64292337958646, -8.648249097640141), (40.64297132000576, -8.64826593018923), (40.64301925983295, -8.648282765654534), (40.64306719903837, -8.648299604181105), (40.64311513758919, -8.64831644592929), (40.64316307544896, -8.648333291077282), (40.64321101257693, -8.64835013982427), (40.643258948927176, -8.64836699239438), (40.6433068844477, -8.648383849041661), (40.64335481907902, -8.648400710056514), (40.64340275275247, -8.648417575774088), (40.6434506853879, -8.64843444658547), (40.64349861689052, -8.648451322952967), (40.64354654714654, -8.648468205431481), (40.64359447601678, -8.648485094699415), (40.64364240332712, -8.648501991605036), (40.64369032885353, -8.648518897239331), (40.64373825229701, -8.648535813057508), (40.64378617323851, -8.64855274109772), (40.64383409104862, -8.648569684418737), (40.64388200467663, -8.648586648121531), (40.64392991201653, -8.648603642415475), (40.64397779517385, -8.64862076000463)]




current_pos = (40.64196130815548, -8.651599817893402)
final_pos = (40.64260232822538, -8.648281407423386)
speed = 60/3.6  #km /3.6 = m/s
TIME = 0.4 #seconds
current_bearing = 0
index = 0
dataset = 0
first = True
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe("vanetza/out/cam")
    #client.subscribe("vanetza/out/spatem")
    # client.subscribe("vanetza/out/denm")
    # ...


# É chamada automaticamente sempre que recebe uma mensagem nos tópicos subscritos em cima
def on_message(client, userdata, msg):
    message = msg.payload.decode('utf-8')
    
    #print('Topic: ' + msg.topic)
    #print('Message' + message)

    obj = json.loads(message)

    # lat = obj["latitude"]
    # ...


def next_position(current_p, final_p, tempo):
    """
      Calcula a próxima posição com base em coordenadas GPS e velocidade.

      Args:
        coordenadas_gps: Tupla com latitude e longitude (em graus).
        velocidade_x: Velocidade na direção x (em metros por segundo).
        velocidade_y: Velocidade na direção y (em metros por segundo).
        tempo: Tempo em segundos.

      Returns:
        Tupla com as coordenadas da próxima posição (latitude e longitude em graus).
      """
    global current_bearing, index, TIME, simple_positions, first, final_pos
    distance = speed * TIME / 1000
    bearing = calculate_initial_compass_bearing(current_p, final_p)

    if math.fabs(int(current_bearing)- int(bearing))>5 and not first:
        index+=1
        if index == len(simple_positions):
            index = -1
        print("index = " + str(index))
        bearing = calculate_initial_compass_bearing(current_p, simple_positions[index][1])
        final_pos = simple_positions[index][1]
        first = True
        current_bearing = bearing
        end_point = simple_positions[index][0]
    else:
        end_point = geopy.distance.distance(kilometers=distance).destination(current_pos, bearing)


    current_bearing = bearing



    if first:
        first= False
    # Retorna a próxima posição
    return end_point[0], end_point[1]

def calculate_initial_compass_bearing(pointA, pointB):
  """
  Calculates the bearing between two points.
  The formulae used is the following:
      θ = atan2(sin(Δlong).cos(lat2),
                cos(lat1).sin(lat2) − sin(lat1).cos(lat2).cos(Δlong))
  :Parameters:
    - `pointA: The tuple representing the latitude/longitude for the
      first point. Latitude and longitude must be in decimal degrees
    - `pointB: The tuple representing the latitude/longitude for the
      second point. Latitude and longitude must be in decimal degrees
  :Returns:
    The bearing in degrees
  :Returns Type:
    float
  """
  if (type(pointA) != tuple) or (type(pointB) != tuple):
    raise TypeError("Only tuples are supported as arguments")

  lat1 = math.radians(pointA[0])
  lat2 = math.radians(pointB[0])

  diffLong = math.radians(pointB[1] - pointA[1])

  x = math.sin(diffLong) * math.cos(lat2)
  y = math.cos(lat1) * math.sin(lat2) - (math.sin(lat1)
                                         * math.cos(lat2) * math.cos(diffLong))

  initial_bearing = math.atan2(x, y)

  # Now we have the initial bearing but math.atan2 return values
  # from -180° to + 180° which is not what we want for a compass bearing
  # The solution is to normalize the initial bearing as shown below
  initial_bearing = math.degrees(initial_bearing)
  compass_bearing = (initial_bearing + 360) % 360

  return compass_bearing


def generate():
    #f = open('in_spatem.json')
    f = open('my_in_cam.json')
    m = json.load(f)
    global current_pos, final_pos
    next_latitude, next_longitude = next_position(current_pos, final_pos, TIME)
    current_pos = (next_latitude, next_longitude)
    m["latitude"] = next_latitude
    m["longitude"] = next_longitude
    m["speed"] = speed*3.6
    m = json.dumps(m)
    print(m)
#    client.publish("vanetza/in/spatem",m)
    client.publish("vanetza/in/cam",m)
    f.close()
    sleep(TIME)

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("192.168.98.20", 1883, 60)

threading.Thread(target=client.loop_forever).start()

while(True):
    generate()
